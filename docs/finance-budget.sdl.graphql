"""
Indicates exactly one field must be supplied and this field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

"""Supported banks for statement import and transaction parsing."""
enum BankName {
  HDFC
  SBI
  OTHER
}

"""Tenant scope used for data segregation across users/clients."""
enum TenantType {
  PERSONAL
  CLIENT
  DEFAULT
}

"""Root query operations for the Finance Budget API."""
type Query {
  """API version of the GraphQL service."""
  apiVersion: String
  """Simple health check; returns a status string if the API is up."""
  healthCheck: String
  """Returns yearly income, expenses, net savings, and transactions."""
  annualReview(year: Int!): AnnualReview!
  """Returns monthly income, expenses, savings, category breakdown, and series."""
  monthlyReview(month: Int!, year: Int!): MonthlyReview!
  """Returns income, expense, and net savings for the given period."""
  aggregateSummary(year: Int!, month: Int): AggregatedSummary!
  """Groups transactions by category with totals for the month."""
  categoryBreakdown(month: Int!, year: Int!): [CategoryGroup!]!
  """Lists transactions filtered by month/year (paged by cursor)."""
  transactions(filters: TransactionsFilter!, cursor: String): TransactionsPage!
  """Lists categories grouped by base type (INCOME/EXPENSES/SAVINGS)."""
  categoriesByBase: [CategoriesByBase!]!
  """Lists supported tenant types available in the system."""
  tenants: [Tenant!]!
  """Lists savings goals with current progress and history."""
  savingsGoals: [SavingsGoal!]!
  """Lists sinking funds, balances, and history for the tenant."""
  sinkingFunds: [SinkingFund!]!
  """Forecasts daily cash flow for the specified month with optional rules."""
  forecastMonth(year: Int!, month: Int!, options: ForecastOptionsInput): ForecastResult!
  """Lists all recurring transactions for the current tenant/user."""
  recurringTransactions: [RecurringTransaction!]!
}

"""Input payload to register a new user account."""
input RegisterInput {
  email: String!
  name: String!
  tenantId: TenantType!
  password: String!
}

"""Result of the register mutation."""
type RegisterResponse {
  success: Boolean!
  message: String!
}

"""Input payload to authenticate a user."""
input LoginInput {
  email: String!
  tenantId: TenantType!
  password: String!
}

"""User account profile for the authenticated tenant."""
type User {
  email: String!
  name: String!
  tenantId: TenantType!
  isActive: Boolean!
}

"""Result of the login mutation containing user and token."""
type LoginResponse {
  user: User!
  token: String!
}

"""Root mutation operations for the Finance Budget API."""
type Mutation {
  """Creates a new user account for the given tenant."""
  register(input: RegisterInput!): RegisterResponse!
  """Authenticates a user and returns a login token."""
  login(input: LoginInput!): LoginResponse!
  """Adds or syncs transaction category rules for the current tenant."""
  addTransactionCategory: Boolean!
  """Reclassifies a transaction to a new category and returns the updated item."""
  reclassifyTransaction(id: String!, category: String!): ReclassifiedTransaction!
  """Uploads a bank statement file (base64) for processing and import."""
  uploadStatement(input: StatementInput!): Boolean!
  """Creates a recurring transaction definition."""
  createRecurringTransaction(input: CreateRecurringTransactionInput!): RecurringTransaction!
  """Materializes recurring transactions for the given month and returns the count."""
  generateRecurringTransactions(month: Int!, year: Int!): Int!
  """Sets the budget amount for a category in the specified month/year."""
  setBudget(period: PeriodInput!, category: String!, amount: Float!): Budget!
}

"""Normalized bank transaction record as imported and processed."""
type Transaction {
  tenantId: TenantType!
  userId: String!
  transactionId: String!
  bankName: BankName!
  amount: Float!
  balance: Float
  txnDate: String!
  description: String
  category: String
  embedding: [Float!]
  taggedBy: String
  confidence: Float
  type: String
}

"""Simplified transaction representation used for listings."""
type TransactionItem {
  id: String!
  date: String!
  description: String
  amount: Float!
  currency: String!
  category: String
  taggedBy: String
}

"""Cursor-paginated list of transaction items."""
type TransactionsPage {
  items: [TransactionItem!]!
  cursor: String
}

"""Subset of fields returned after reclassifying a transaction."""
type ReclassifiedTransaction {
  id: String!
  category: String!
  taggedBy: String
}

"""Filters to list transactions for a given period and category."""
input TransactionsFilter {
  year: Int!
  month: Int!
  bankName: BankName
  category: String
}

"""Category with its aggregated amount."""
type CategoryAmount {
  name: String!
  amount: Float!
}

"""Budget vs actual values for a specific date."""
type ReviewSeriesPoint {
  date: String!
  budget: Float!
  actual: Float!
}

"""Monthly aggregates, category breakdown, and time series."""
type MonthlyReview {
  totalIncome: Float!
  totalExpenses: Float!
  savings: Float!
  categoryBreakdown: [CategoryAmount!]!
  series: [ReviewSeriesPoint!]!
}

"""Yearly aggregates and the list of transactions."""
type AnnualReview {
  totalIncome: Float!
  totalExpense: Float!
  netSavings: Float!
  transactions: [Transaction!]!
}

"""Transactions grouped by category with total amount."""
type CategoryGroup {
  category: String!
  totalAmount: Float!
  transactions: [Transaction!]!
}

"""Top-level budget category buckets used for grouping."""
enum BaseCategory {
  SAVINGS
  EXPENSES
  INCOME
  DEFAULT
}

"""Categories grouped by their base category bucket."""
type CategoriesByBase {
  base: BaseCategory!
  categories: [String!]!
}

"""Aggregated totals for income, expenses, and net savings."""
type AggregatedSummary {
  totalIncome: Float!
  totalExpense: Float!
  netSavings: Float!
}

"""Payload to upload a bank statement (base64 content)."""
input StatementInput {
  bankName: BankName!
  fileName: String!
  contentBase64: String!
}

"""Tenant record available in the system."""
type Tenant {
  id: TenantType!
  name: String!
}

"""Historical point representing savings value on a date."""
type SavingsHistoryPoint {
  date: String!
  value: Float!
}

"""Savings goal with target, current progress, deadline, and history."""
type SavingsGoal {
  id: ID!
  name: String!
  target: Float!
  current: Float!
  deadline: String!
  history: [SavingsHistoryPoint!]!
}

"""Historical point representing sinking fund value on a date."""
type SinkingFundHistoryPoint {
  date: String!
  value: Float!
}

"""Sinking fund with targets, balances, and contribution history."""
type SinkingFund {
  id: ID!
  name: String!
  target: Float!
  current: Float!
  monthlyContribution: Float
  deadline: String
  history: [SinkingFundHistoryPoint!]!
}

"""Per-day forecast metrics and running balance."""
type ForecastDay {
  date: String!
  inflow: Float!
  outflow: Float!
  net: Float!
  runningBalance: Float
}

"""Severity levels for forecast alerts."""
enum AlertSeverity {
  info
  warning
  critical
}

"""Alert generated during forecasting with severity and message."""
type ForecastAlert {
  date: String!
  type: String!
  message: String!
  severity: AlertSeverity!
}

"""Monthly cash-flow forecast summary with daily details and alerts."""
type ForecastResult {
  month: Int!
  year: Int!
  startingBalance: Float!
  endingBalance: Float!
  days: [ForecastDay!]!
  alerts: [ForecastAlert!]!
}

"""Optional parameters to tune forecasting behavior and thresholds."""
input ForecastOptionsInput {
  startingBalance: Float
  lowBalanceThreshold: Float
  largeExpenseThreshold: Float
}

"""Supported schedules for recurring transactions."""
enum RecurringFrequency {
  monthly
  weekly
  biweekly
  yearly
}

"""Definition and schedule of a recurring transaction."""
type RecurringTransaction {
  id: String!
  description: String!
  amount: Float!
  category: String
  frequency: RecurringFrequency!
  dayOfMonth: Int
  dayOfWeek: Int
  monthOfYear: Int
  startDate: String!
  endDate: String
  nextRunDate: String
}

"""Input to create a recurring transaction rule."""
input CreateRecurringTransactionInput {
  description: String!
  amount: Float!
  category: String
  frequency: RecurringFrequency!
  dayOfMonth: Int
  dayOfWeek: Int
  monthOfYear: Int
  startDate: String!
  endDate: String
}

"""Budget allocation for a category in a specific month/year."""
type Budget {
  id: String!
  month: Int!
  year: Int!
  category: String!
  amount: Float!
}

"""Period identifier consisting of month and year."""
input PeriodInput {
  month: Int!
  year: Int!
}
